{"version":3,"sources":["actions/Actions.js","pokemon/Sprites.js","pokemon/Abilities.js","pokemon/Types.js","pokemon/Stats.js","screens/AbilityScreen.js","screens/TypeScreen.js","screens/MoveScreen.js","pokemon/Description.js","app/MainPokemon.js","app/sidebar/Searcher.js","app/sidebar/List.js","app/Sidebar.js","App.js","reducers/Reducers.js","index.js"],"names":["fetchPokemonListBegin","type","fetchPokemonListSuccess","data","payload","fetchPokemonListFailure","error","pokemonListAddFilter","characters","fetchPokemonBegin","fetchPokemonSuccess","pokemon","fetchPokemonFailure","fetchPokemonSpeciesBegin","fetchPokemonSpeciesSuccess","species","fetchPokemonSpeciesFailure","fetchAbilitySuccess","fetchTypeSuccess","connect","fn","state","sprites","pokemonReducer","currentIndex","name","props","className","alt","src","value","onClick","dispatch","handleClickPrevious","handleClickNext","safeHandleClickAbility","e","a","fetch","target","id","response","json","catch","fetchAbilityFailure","String","abilities","map","key","ability","url","toUpperCase","replace","handleClickType","types","fetchTypeFailure","stats","base_stat","cleanup","abilityScreenReducer","ready","isFetching","effect_entries","effect","x","typeScreenReducer","damage_relations","double_damage_from","double_damage_to","half_damage_from","half_damage_to","no_damage_from","no_damage_to","moves","movesArray","push","version_group_details","level_learned_at","move","list","swapped","n","length","i","temp","bubbleSort","len","cut","splice","concat","levelsFirstSort","pokemonSpeciesReducer","flavor_text_entries","filter","language","undefined","flavor_text","pokemonIsReady","speciesIsReady","UIReducer","height","weight","number","fixed","showTypeScreen","showAbilityScreen","showMoveScreen","results","pokemonListReducer","pokemonList","defaultValue","onChange","toLowerCase","split","handleChange","filterResults","filters","db","join","forEach","letters","filteredPokemon","Object","keys","generateFilteredPokemonList","filteredResults","indexOf","filteredList","handleClickPokemon","speciesData","allPokemon","allPokemonLetters","Set","Array","from","letter","generateDatabase","readOnly","handleError","Sidebar","App","componentDidMount","fetchPokemonAPI","fetchPokemon","this","href","React","Component","screen","UIInitialState","listInitialState","pokemonInitialState","speciesInitialState","abilityScreenInitialState","typeScreenInitialState","rootReducer","combineReducers","action","front_default","back_default","front_shiny","back_shiny","STORE","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.677eb657.chunk.js","sourcesContent":["export const FETCH_POKEMON_LIST_BEGIN = \"FETCH_POKEMON_LIST_BEGIN\"\r\nexport const FETCH_POKEMON_LIST_SUCCESS = \"FETCH_POKEMON_LIST_SUCCESS\"\r\nexport const FETCH_POKEMON_LIST_FAILURE = \"FETCH_POKEMON_LIST_FAILURE\"\r\n\r\nexport const POKEMON_LIST_ADD_FILTER = \"POKEMON_LIST_ADD_FILTER\"\r\nexport const POKEMON_LIST_FILTER = \"POKEMON_LIST_FILTER\"\r\n\r\nexport const ABILITY_SCREEN_SHOW = \"ABILITY_SCREEN_SHOW\"\r\nexport const ABILITY_SCREEN_CLEAR = \"ABILITY_SCREEN_CLEAR\"\r\n\r\nexport const TYPE_SCREEN_SHOW = \"TYPE_SCREEN_SHOW\"\r\nexport const TYPE_SCREEN_CLEAR = \"TYPE_SCREEN_CLEAR\"\r\n\r\nexport const MOVE_SCREEN_SHOW = \"MOVE_SCREEN_SHOW\"\r\nexport const CLOSE_ALL_SCREENS = \"CLOSE_ALL_SCREENS\"\r\n\r\n\r\nexport const FETCH_POKEMON_BEGIN = 'FETCH_POKEMON_BEGIN'\r\nexport const FETCH_POKEMON_SUCCESS = \"FETCH_POKEMON_SUCCESS\"\r\nexport const FETCH_POKEMON_FAILURE = \"FETCH_POKEMON_FAILURE\"\r\n\r\nexport const SPRITE_INCREMENT = \"SPRITE_INCREMENT\"\r\nexport const SPRITE_DECREMENT = \"SPRITE_DECREMENT\"\r\n\r\nexport const FETCH_POKEMON_SPECIES_BEGIN = \"FETCH_POKEMON_SPECIES_BEGIN\"\r\nexport const FETCH_POKEMON_SPECIES_SUCCESS = \"FETCH_POKEMON_SPECIES_SUCCESS\"\r\nexport const FETCH_POKEMON_SPECIES_FAILURE = \"FETCH_POKEMON_SPECIES_FAILURE\"\r\n\r\nexport const FETCH_ABILITY_BEGIN = \"FETCH_ABILITY_BEGIN\"\r\nexport const FETCH_ABILITY_SUCCESS = \"FETCH_ABILITY_SUCCESS\"\r\nexport const FETCH_ABILITY_FAILURE = \"FETCH_ABILITY_FAILURE\"\r\n\r\nexport const FETCH_TYPE_BEGIN = \"FETCH_TYPE_BEGIN\"\r\nexport const FETCH_TYPE_SUCCESS = \"FETCH_TYPE_SUCCESS\"\r\nexport const FETCH_TYPE_FAILURE = \"FETCH_TYPE_FAILURE\"\r\n\r\nexport const fetchPokemonListBegin = () => {\r\n    return {\r\n        type: FETCH_POKEMON_LIST_BEGIN\r\n    }\r\n}\r\nexport const fetchPokemonListSuccess = data => {\r\n    return {\r\n        type: FETCH_POKEMON_LIST_SUCCESS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const fetchPokemonListFailure = error => {\r\n    return {\r\n        type: FETCH_POKEMON_LIST_FAILURE,\r\n        payload: { error }\r\n    }\r\n}\r\n\r\nexport const pokemonListAddFilter = characters => {\r\n    return {\r\n        type: POKEMON_LIST_ADD_FILTER,\r\n        payload: characters\r\n    }\r\n}\r\n\r\nexport const pokemonListFilter = list => {\r\n    return {\r\n        type: POKEMON_LIST_FILTER,\r\n        payload: list\r\n    }\r\n}\r\n\r\nexport const fetchPokemonBegin = () => {\r\n    return {\r\n        type: FETCH_POKEMON_BEGIN\r\n    }\r\n}\r\n\r\nexport const fetchPokemonSuccess = pokemon => {\r\n    return {\r\n        type: FETCH_POKEMON_SUCCESS,\r\n        payload: pokemon\r\n    }\r\n}\r\n\r\nexport const fetchPokemonFailure = error => {\r\n    return {\r\n        type: FETCH_POKEMON_FAILURE,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport const spriteIncrement = () => {\r\n    return {\r\n        type: SPRITE_INCREMENT\r\n    }\r\n}\r\n\r\nexport const spriteDecrement =()=> {\r\n    return {\r\n        type: SPRITE_DECREMENT\r\n    }\r\n}\r\n\r\nexport const fetchPokemonSpeciesBegin = () => {\r\n    return {\r\n        type: FETCH_POKEMON_SPECIES_BEGIN,\r\n    }\r\n}\r\n\r\nexport const fetchPokemonSpeciesSuccess = species => {\r\n    return {\r\n        type: FETCH_POKEMON_SPECIES_SUCCESS,\r\n        payload: species\r\n    }\r\n}\r\n\r\nexport const fetchPokemonSpeciesFailure = error => {\r\n    return {\r\n        type: FETCH_POKEMON_SPECIES_FAILURE,\r\n        payload: { error }\r\n    }\r\n}\r\n\r\nexport const showAbilityScreen = () => {\r\n    return {\r\n        type: ABILITY_SCREEN_SHOW,\r\n    }\r\n}\r\n\r\nexport const clearAbilityScreen = () => {\r\n    return {\r\n        type: ABILITY_SCREEN_CLEAR\r\n    }\r\n}\r\n\r\nexport const showMoveScreen = () => {\r\n    return {\r\n        type: MOVE_SCREEN_SHOW,\r\n    }\r\n}\r\n\r\nexport const showTypeScreen = () => {\r\n    return {\r\n        type: TYPE_SCREEN_SHOW,\r\n    }\r\n}\r\n\r\nexport const clearTypeScreen = () => {\r\n    return {\r\n        type: TYPE_SCREEN_CLEAR\r\n    }\r\n}\r\n\r\nexport const closeAllScreens = () => {\r\n    return {\r\n        type: CLOSE_ALL_SCREENS\r\n    }\r\n}\r\n\r\nexport const fetchAbilityBegin = () => {\r\n    return {\r\n        type: FETCH_ABILITY_BEGIN\r\n    }\r\n}\r\n\r\nexport const fetchAbilitySuccess = data => {\r\n    return {\r\n        type: FETCH_ABILITY_SUCCESS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const fetchAbilityFailure = error => {\r\n    return {\r\n        type: FETCH_ABILITY_FAILURE,\r\n        payload: { error }\r\n    }\r\n}\r\n\r\nexport const fetchTypeBegin = () => {\r\n    return {\r\n        type: FETCH_TYPE_BEGIN\r\n    }\r\n}\r\n\r\nexport const fetchTypeSuccess = data => {\r\n    return {\r\n        type: FETCH_TYPE_SUCCESS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const fetchTypeFailure = error => {\r\n    return {\r\n        type: FETCH_TYPE_FAILURE,\r\n        payload: { error }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { connect } from \"react-redux\"\r\nimport { spriteIncrement, spriteDecrement } from '../actions/Actions';\r\n\r\nlet handleClickNext = (props) => {\r\n    if (props.currentIndex < 3) props.dispatch(spriteIncrement())\r\n}\r\n\r\nlet handleClickPrevious = (props) => {\r\n    if (props.currentIndex > 0) props.dispatch(spriteDecrement())\r\n}\r\n\r\nlet Sprites = (props) => {\r\n    return (\r\n        <div className=\"sprites\">\r\n            <img\r\n                alt={props.name}\r\n                src={props.sprites[props.currentIndex]} />\r\n            <input className=\"spriteButton\" type=\"button\" value=\"<=\" onClick={() => handleClickPrevious(props)}></input>\r\n            <input className=\"spriteButton\" type=\"button\" value=\"=>\" onClick={() => handleClickNext(props)}></input>\r\n        </div>)\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        sprites: state.pokemonReducer.sprites,\r\n        currentIndex: state.pokemonReducer.currentIndex,\r\n        name: state.pokemonReducer.pokemon.name\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Sprites)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n    showAbilityScreen,\r\n    fetchAbilityBegin,\r\n    fetchAbilitySuccess,\r\n    fetchAbilityFailure\r\n} from '../actions/Actions'\r\n\r\nlet handleClickAbility = async (props, e) => {\r\n    props.dispatch(showAbilityScreen())\r\n    props.dispatch(fetchAbilityBegin())\r\n    let response = await fetch(e.target.id)\r\n    let data = await response.json()\r\n    await props.dispatch(fetchAbilitySuccess(data))\r\n}\r\n\r\nlet handleError = fn => (props, e) => fn(props, e).catch(error => props.dispatch(fetchAbilityFailure(String(error))))\r\nlet safeHandleClickAbility = handleError(handleClickAbility)\r\n\r\nlet Abilities = (props) => {\r\n    return (\r\n        <div className=\"abilities\">\r\n            <div>ABILITIES:</div>\r\n            {props.abilities.map(key =>\r\n                <li key={key.ability.name}\r\n                    id={key.ability.url}\r\n                    onClick={(e) => safeHandleClickAbility(props, e)}\r\n                >{key.ability.name.toUpperCase().replace(/-/, ' ')}</li>)}\r\n        </div>)\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        abilities: state.pokemonReducer.pokemon.abilities\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Abilities)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { showTypeScreen, fetchTypeBegin, fetchTypeSuccess, fetchTypeFailure } from \"../actions/Actions\"\r\n\r\nlet handleClickType = async (props, e) => {\r\n    props.dispatch(fetchTypeBegin())\r\n    props.dispatch(showTypeScreen())\r\n    let response = await fetch(e.target.id)\r\n    let data = await response.json()\r\n    await props.dispatch(fetchTypeSuccess(data))\r\n}\r\n\r\nlet Types = (props) => {\r\n    return (    \r\n        <div className=\"types\">\r\n            <div >TYPES:</div>\r\n            {props.types.map(key => <li\r\n                key={key.type.name}\r\n                id={key.type.url}\r\n                onClick={(e) => handleClickType(props, e).catch(error => props.dispatch(fetchTypeFailure(String(error))))}>\r\n                {key.type.name.toUpperCase()}</li>)}\r\n        </div>)\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        types: state.pokemonReducer.pokemon.types\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Types)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nlet Stats = (props) => {\r\n    return (\r\n        <div className=\"stats\">\r\n            <div>HP: {props.stats[5].base_stat}</div>\r\n            <div>ATTACK: {props.stats[4].base_stat}</div>\r\n            <div>DEFENSE: {props.stats[3].base_stat}</div>\r\n            <div>SPECIAL ATTACK: {props.stats[2].base_stat}</div>\r\n            <div>SPECIAL DEFENSE: {props.stats[1].base_stat}</div>\r\n            <div>SPEED: {props.stats[0].base_stat}</div>\r\n        </div>\r\n    )\r\n}\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        stats: state.pokemonReducer.pokemon.stats\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Stats)\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { closeAllScreens, clearAbilityScreen } from \"../actions/Actions\";\r\n\r\nlet cleanup = (props) => {\r\n    props.dispatch(closeAllScreens())\r\n    props.dispatch(clearAbilityScreen())\r\n}\r\n\r\nlet AbilityScreen = props => {\r\n    if (props.error !== null)\r\n        return (\r\n            <div className=\"screen\">\r\n                <p>The following error was found during loading:</p>\r\n                <p>{props.error}</p>\r\n                <p className=\"screen-close\" onClick={() => cleanup(props)}>Close screen</p>\r\n            </div>)\r\n\r\n    if (!props.ready)\r\n        return (\r\n            <div className=\"screen\">\r\n                <p>Loading...</p>\r\n                <p className=\"screen-close\" onClick={() => cleanup(props)}>Close screen</p>\r\n            </div>)\r\n\r\n    return (\r\n        <div className=\"screen\">\r\n            <div className=\"screen-text\">ABILITY NAME: {props.ability.name.toUpperCase().replace(/-/, ' ')} </div>\r\n            <div className=\"screen-text\">ID: {props.ability.id}</div>\r\n            <div className=\"screen-text\">EFFECT: {props.ability.effect_entries[0].effect}</div>\r\n            <div className=\"screen-text\">USERS: {props.ability.pokemon.map((x) => String(x.pokemon.name.toUpperCase()) + \" \")}</div>\r\n            <button className=\"screen-close\" onClick={() => cleanup(props)}>Close screen</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        ability: state.abilityScreenReducer.ability,\r\n        ready: state.abilityScreenReducer.ready,\r\n        isFetching: state.abilityScreenReducer.isFetching,\r\n        error: state.abilityScreenReducer.error,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AbilityScreen)\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { closeAllScreens, clearTypeScreen } from \"../actions/Actions\"\r\n\r\nlet cleanup = (props) => {\r\n    props.dispatch(closeAllScreens())\r\n    props.dispatch(clearTypeScreen())\r\n}\r\n\r\nlet TypeScreen = props => {\r\n    if (props.error !== null)\r\n        return (\r\n            <div className=\"screen\">\r\n                <p>The following error was found during loading:</p>\r\n                <p>{props.error}</p>\r\n                <p className=\"screen-close\" onClick={() => cleanup(props)}>Close screen</p>\r\n            </div>\r\n        )\r\n    if (!props.ready)\r\n        return (\r\n            <div className=\"screen\">\r\n                <p>Loading...</p>\r\n                <p onClick={() => cleanup(props)} className=\"screen-close\">Close screen</p>\r\n            </div>)\r\n    return (\r\n        <div className=\"screen\">\r\n            <div className=\"screen-text\">TYPE NAME: {props.type.name.toUpperCase()}</div>\r\n            <div className=\"screen-text\">ID: {props.type.id}</div>\r\n            <div className=\"screen-text\">\r\n                2x DAMAGE FROM: {props.type.damage_relations.double_damage_from.map((x) => String(x.name.toUpperCase()) + \" \")}<br />\r\n                2x DAMAGE TO: {props.type.damage_relations.double_damage_to.map((x) => String(x.name.toUpperCase()) + \" \")}</div>\r\n            <div className=\"screen-text\">\r\n                1/2 DAMAGE FROM: {props.type.damage_relations.half_damage_from.map((x) => String(x.name.toUpperCase()) + \" \")}<br />\r\n                1/2 DAMAGE TO: {props.type.damage_relations.half_damage_to.map((x) => String(x.name.toUpperCase()) + \" \")}</div>\r\n            <div className=\"screen-text\">\r\n                NO DAMAGE FROM: {props.type.damage_relations.no_damage_from.map((x) => String(x.name.toUpperCase()) + \" \")}<br />\r\n                NO DAMAGE TO: {props.type.damage_relations.no_damage_to.map((x) => String(x.name.toUpperCase()) + \" \")}</div>\r\n            <p onClick={() => cleanup(props)} className=\"screen-close\">Close screen</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        type: state.typeScreenReducer.type,\r\n        ready: state.typeScreenReducer.ready,\r\n        isFetching: state.typeScreenReducer.isFetching,\r\n        error: state.typeScreenReducer.error,\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(TypeScreen)\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { closeAllScreens } from \"../actions/Actions\"\r\n\r\nfunction bubbleSort(list) {\r\n    let swapped\r\n    let n = list.length - 1\r\n    do {\r\n        swapped = false\r\n        for (let i = 0; i < n; i++) {\r\n            // compare pairs of elements\r\n            // if left element > right element, swap\r\n            if (list[i][0] > list[i + 1][0]) {\r\n                const temp = list[i]\r\n                list[i] = list[i + 1]\r\n                list[i + 1] = temp\r\n                swapped = true\r\n            }\r\n        }\r\n    }\r\n    // continue swapping until sorted\r\n    while (swapped)\r\n\r\n    return list\r\n}\r\n\r\nfunction levelsFirstSort(list) {\r\n    let len = list.length\r\n    let cut = 0\r\n    for (let i = 0; i < len; i++) {\r\n        if (list[i][0] === 0) { cut++ }\r\n    }\r\n    let temp = list.splice(0, cut)\r\n    list = list.concat(temp)\r\n    return list\r\n\r\n}\r\n\r\n\r\nlet MoveScreen = (props) => {\r\n    let movesArray = []\r\n    props.moves.map((x) => movesArray.push([x.version_group_details[0].level_learned_at, x.move.name]))\r\n    bubbleSort(movesArray)\r\n    levelsFirstSort(movesArray)\r\n    return (\r\n        <div className=\"screen\">\r\n            {movesArray.map((x) => (<div key={x[1]}> {x[1].toUpperCase().replace(/-/, ' ')} learned at: {x[0]}</div>))}\r\n            <p onClick={() => props.dispatch(closeAllScreens())} className=\"screen-close\" > Close screen</p>\r\n        </div >\r\n    )\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        moves: state.pokemonReducer.pokemon.moves\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(MoveScreen)\r\n\r\n","import React from 'react'\r\nimport { connect } from \"react-redux\"\r\n\r\nfunction returnFirstResult(array) {\r\n    let results = array.filter(key => key.language.name === \"en\" && key.flavor_text !== undefined)\r\n    return results[0].flavor_text\r\n}\r\n\r\nlet Description = (props) => {\r\n    return (\r\n        <div className=\"description\">{returnFirstResult(props.species.flavor_text_entries)}</div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        species: state.pokemonSpeciesReducer.species\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Description)\r\n","import React from \"react\"\r\nimport Sprites from \"../pokemon/Sprites\";\r\nimport Abilities from \"../pokemon/Abilities\"\r\nimport Types from \"../pokemon/Types\"\r\nimport Stats from \"../pokemon/Stats\"\r\nimport AbilityScreen from '../screens/AbilityScreen';\r\nimport TypeScreen from '../screens/TypeScreen';\r\nimport MovesScreen from \"../screens/MoveScreen\"\r\nimport { connect } from 'react-redux'\r\nimport { showMoveScreen } from \"../actions/Actions\"\r\nimport Description from \"../pokemon/Description\";\r\n\r\nfunction fixed(number) {\r\n    let value = String(number)\r\n    while (value.length < 3) { value = \"0\" + value }\r\n    return value\r\n}\r\n\r\nlet MainPokemon = (props) => {\r\n    if (!props.pokemonIsReady || !props.speciesIsReady) return <div>Loading...</div>\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"main\">\r\n                <Sprites />\r\n                <div className=\"name\" id=\"name\">{props.pokemon.name.toUpperCase()}</div>\r\n                <div className=\"height\">HEIGHT: {props.pokemon.height / 10} METRE</div>\r\n                <div className=\"weight\">WEIGHT: {props.pokemon.weight / 10} KG.</div>\r\n                <div className=\"number\">No. {fixed(props.pokemon.id)}</div>\r\n                <Types />\r\n                <Abilities />\r\n                <div className=\"moves\" onClick={() => props.dispatch(showMoveScreen())}>MOVELIST</div>\r\n                <Stats />\r\n                <Description />\r\n                {(props.UIReducer.showTypeScreen) && <TypeScreen />}\r\n                {(props.UIReducer.showAbilityScreen) && <AbilityScreen />}\r\n                {(props.UIReducer.showMoveScreen) && <MovesScreen />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        pokemon: state.pokemonReducer.pokemon,\r\n        pokemonIsReady: state.pokemonReducer.ready,\r\n        speciesIsReady: state.pokemonSpeciesReducer.ready,\r\n        error: state.error,\r\n        UIReducer: state.UIReducer\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MainPokemon)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { pokemonListAddFilter } from '../../actions/Actions'\r\n\r\nlet handleChange = (props, e) => {\r\n    if (e.target.value === \"\") props.dispatch(pokemonListAddFilter(null))\r\n    else props.dispatch(pokemonListAddFilter(e.target.value.toLowerCase().split(\"\")))\r\n}\r\n\r\nlet Searcher = (props) => {\r\n    return (\r\n        <div className=\"searcher\">\r\n            <input\r\n                id=\"page-searcher\"\r\n                type=\"text\"\r\n                defaultValue=\"Filter by name:\"\r\n                onClick={(e)=> e.target.value = \"\"}\r\n                onChange={(e) => handleChange(props, e)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        results: state.pokemonListReducer.pokemonList.results\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Searcher)\r\n","import React from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport {\r\n    fetchPokemonBegin,\r\n    fetchPokemonSuccess,\r\n    fetchPokemonSpeciesBegin,\r\n    fetchPokemonSpeciesSuccess,\r\n    fetchPokemonFailure,\r\n    fetchPokemonSpeciesFailure,\r\n} from \"../../actions/Actions\"\r\n\r\nlet generateDatabase = (results) => {\r\n    let allPokemon = {}\r\n    let allPokemonLetters = {}\r\n    results.map(key => allPokemon[key.name] = new Set(key.name.split(\"\")))\r\n    Object.keys(allPokemon).forEach(key => Array.from(allPokemon[key]).map(letter => {\r\n        if (allPokemonLetters[letter] === undefined) allPokemonLetters[letter] = []\r\n        allPokemonLetters[letter].push(key)\r\n    }))\r\n    let db = { pokemon: allPokemon, letters: allPokemonLetters }\r\n    return db\r\n}\r\n\r\nlet generateFilteredPokemonList = (filters, db) => {\r\n    let pokemonList = []\r\n\r\n    // First tries to find perfect match\r\n    if (db.pokemon[filters.join(\"\")] !== undefined) return [filters.join(\"\")]\r\n\r\n    // Else, counts how many times every character appears in each pokemon name and assigns it a value, returning only those in which the value is equal or bigger than the amount of filters applied.\r\n    filters.forEach(key => { if (db.letters[key] !== undefined) db.letters[key].forEach(pokemon => pokemonList.push(pokemon)) })\r\n    let filteredPokemon = {}\r\n    for (let i = 0; i < pokemonList.length; i++) {\r\n        filteredPokemon[pokemonList[i]] === undefined ? filteredPokemon[pokemonList[i]] = 1 : filteredPokemon[pokemonList[i]]++\r\n    }\r\n    let filteredPokemonList = Object.keys(filteredPokemon).filter(key => filteredPokemon[key] >= filters.length)\r\n    return filteredPokemonList\r\n}\r\n\r\nlet filterResults = (results, filters, db) => {\r\n    let pokemonList = generateFilteredPokemonList(filters, db)\r\n    let filteredResults = Object.keys(results).filter(key => pokemonList.indexOf(results[key].name) !== -1)\r\n    let filteredList = []\r\n    filteredResults.forEach(key => filteredList.push(results[key]))\r\n    return filteredList\r\n}\r\n\r\nlet handleClickPokemon = async (props, e) => {\r\n    props.dispatch(fetchPokemonBegin())\r\n    let response = await fetch(\"https://pokeapi.co/api/v2/pokemon/\" + e.target.id)\r\n    let data = await response.json()\r\n    await props.dispatch(fetchPokemonSuccess(data))\r\n    props.dispatch(fetchPokemonSpeciesBegin())\r\n    let species = await fetch(data.species.url)\r\n    let speciesData = await species.json()\r\n    await props.dispatch(fetchPokemonSpeciesSuccess(speciesData))\r\n}\r\n\r\nlet handleError = (props, error) => {\r\n    props.dispatch(fetchPokemonFailure(String(error)))\r\n    props.dispatch(fetchPokemonSpeciesFailure(String(error)))\r\n}\r\n\r\nlet List = (props) => {\r\n    if (!props.ready) return <p> Loading...</p>\r\n    let db = generateDatabase(props.pokemonList.results, props)\r\n    let results = (props.filter !== null) ? filterResults(props.pokemonList.results, props.filter, db) : props.pokemonList.results\r\n    if (results.length < 1) return <div className=\"pokemon-list\"><p>No results found!</p></div>\r\n    return (\r\n        <div className=\"pokemon-list\">\r\n            {results.map(key =>\r\n                <input\r\n                    readOnly={true}\r\n                    key={key.name}\r\n                    value={key.name.toUpperCase()}\r\n                    id={key.name}\r\n                    className=\"pokemonButton\"\r\n                    onClick={(e) => handleClickPokemon(props, e).catch(error => handleError(props, error))}\r\n                />)}\r\n        </div>\r\n    )\r\n}\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        pokemonList: state.pokemonListReducer.pokemonList,\r\n        ready: state.pokemonListReducer.ready,\r\n        filter: state.pokemonListReducer.filter,\r\n        results: state.pokemonListReducer.pokemonList.results\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(List)\r\n","import React from 'react'\r\nimport Searcher from './sidebar/Searcher'\r\nimport List from './sidebar/List'\r\n\r\nlet Sidebar = () => {\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <List />\r\n            <Searcher />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react';\nimport MainPokemon from './app/MainPokemon'\nimport Sidebar from './app/Sidebar'\nimport { connect } from \"react-redux\"\nimport {\n      fetchPokemonListBegin,\n      fetchPokemonListSuccess,\n      fetchPokemonListFailure,\n      fetchPokemonBegin,\n      fetchPokemonSuccess,\n      fetchPokemonFailure,\n      fetchPokemonSpeciesBegin,\n      fetchPokemonSpeciesSuccess,\n      fetchPokemonSpeciesFailure,\n\n} from './actions/Actions'\nimport './css/App.css';\n\n\nclass App extends React.Component {\n      constructor(props) {\n            super(props);\n            this.state = {}\n      }\n\n      componentDidMount = (props) => {\n            this.fetchPokemonAPI().catch(error => props.dispatch(fetchPokemonListFailure(String(error))))\n      }\n\n      fetchPokemonAPI = async () => {\n            this.props.dispatch(fetchPokemonListBegin());\n            let response = await fetch(\"https://pokeapi.co/api/v2/pokemon?offset=0&limit=964\")\n            let data = await response.json()\n            await this.props.dispatch(fetchPokemonListSuccess(data))\n            await this.fetchPokemon(1).catch(error => {\n                  this.props.dispatch(fetchPokemonFailure(String(error)))\n                  this.props.dispatch(fetchPokemonSpeciesFailure(String(error)))\n            })\n      }\n\n      fetchPokemon = async number => {\n            this.props.dispatch(fetchPokemonBegin())\n            let response = await fetch(\"https://pokeapi.co/api/v2/pokemon/\" + number)\n            let data = await response.json()\n            await this.props.dispatch(fetchPokemonSuccess(data))\n            this.props.dispatch(fetchPokemonSpeciesBegin())\n            let species = await fetch(data.species.url)\n            let speciesData = await species.json()\n            await this.props.dispatch(fetchPokemonSpeciesSuccess(speciesData))\n      }\n\n      render() {\n            if (this.props.error.filter(key => key !== null).length > 0) {\n                  return (\n                        <div>\n                              <p>The following errors were found:</p>\n                              {this.props.error.map(key => {\n                                    return key !== null ? <p key={key}>{key}</p> : null\n                              })}\n                        </div>\n                  )\n            }\n            if (this.props.ready.filter(key => key !== true).length > 0) { return <div><p>Loading...</p></div> }\n\n            return (\n                  <div className=\"container\">\n                        <div className=\"logo\"><a href=\"https://pokeapi.co\">PokéAPI</a></div>\n                        <div className=\"header\"><h1>POKéDEX</h1></div>\n                        <Sidebar />\n                        <MainPokemon />\n                  </div>\n            )\n      }\n}\n\nfunction mapStateToProps(state) {\n      return {\n            pokemonList: state.pokemonListReducer.pokemonList,\n            ready: [state.pokemonListReducer.ready, state.pokemonReducer.ready, state.pokemonSpeciesReducer.ready],\n            error: [state.pokemonListReducer.error, state.pokemonReducer.error, state.pokemonSpeciesReducer.error],\n            screen: state.UIReducer.screen,\n      }\n}\nexport default connect(mapStateToProps)(App)\n","import { combineReducers } from \"redux\"\r\nimport {\r\n    FETCH_POKEMON_LIST_BEGIN,\r\n    FETCH_POKEMON_LIST_SUCCESS,\r\n    FETCH_POKEMON_LIST_FAILURE,\r\n\r\n    POKEMON_LIST_FILTER,\r\n    POKEMON_LIST_ADD_FILTER,\r\n\r\n    MOVE_SCREEN_SHOW,\r\n\r\n    ABILITY_SCREEN_SHOW,\r\n    ABILITY_SCREEN_CLEAR,\r\n\r\n    TYPE_SCREEN_SHOW,\r\n    TYPE_SCREEN_CLEAR,\r\n\r\n    CLOSE_ALL_SCREENS,\r\n\r\n    FETCH_POKEMON_BEGIN,\r\n    FETCH_POKEMON_SUCCESS,\r\n    FETCH_POKEMON_FAILURE,\r\n\r\n    SPRITE_INCREMENT,\r\n    SPRITE_DECREMENT,\r\n\r\n    FETCH_POKEMON_SPECIES_BEGIN,\r\n    FETCH_POKEMON_SPECIES_SUCCESS,\r\n    FETCH_POKEMON_SPECIES_FAILURE,\r\n\r\n    FETCH_ABILITY_BEGIN,\r\n    FETCH_ABILITY_SUCCESS,\r\n    FETCH_ABILITY_FAILURE,\r\n\r\n    FETCH_TYPE_BEGIN,\r\n    FETCH_TYPE_SUCCESS,\r\n    FETCH_TYPE_FAILURE,\r\n\r\n\r\n} from \"../actions/Actions\"\r\n\r\nlet UIInitialState = {\r\n    showMoveScreen: false,\r\n    showAbilityScreen: false,\r\n    showTypeScreen: false,\r\n}\r\n\r\nlet listInitialState = {\r\n    ready: false,\r\n    error: null,\r\n    isFetching: false,\r\n    pokemonList: {},\r\n    filter: null,\r\n    filteredList: null,\r\n}\r\n\r\nlet pokemonInitialState = {\r\n    pokemon: {},\r\n    isFetching: false,\r\n    sprites: [],\r\n    currentIndex: 0,\r\n    ready: false,\r\n    error: null,\r\n}\r\n\r\nlet speciesInitialState = {\r\n    species: {},\r\n    isFetching: false,\r\n    ready: false,\r\n    error: null,\r\n}\r\n\r\nlet pokemonListReducer = (state = listInitialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_POKEMON_LIST_BEGIN:\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n                error: null\r\n            }\r\n        case FETCH_POKEMON_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                ready: true,\r\n                pokemonList: action.payload\r\n            }\r\n        case FETCH_POKEMON_LIST_FAILURE:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                ready: false,\r\n                pokemonList: {},\r\n                error: action.payload.error\r\n            }\r\n        case POKEMON_LIST_ADD_FILTER:\r\n            return {\r\n                ...state,\r\n                filter: action.payload,\r\n            }\r\n        case POKEMON_LIST_FILTER:\r\n            return {\r\n                ...state,\r\n                filteredList: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nlet pokemonReducer = (state = pokemonInitialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_POKEMON_BEGIN:\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n            }\r\n        case FETCH_POKEMON_SUCCESS:\r\n            return {\r\n                ...state,\r\n                pokemon: action.payload,\r\n                isFetching: false,\r\n                sprites: [action.payload.sprites.front_default, action.payload.sprites.back_default, action.payload.sprites.front_shiny, action.payload.sprites.back_shiny],\r\n                currentIndex: 0,\r\n                ready: true,\r\n            }\r\n        case FETCH_POKEMON_FAILURE:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                ready: false,\r\n                error: action.payload\r\n            }\r\n        case SPRITE_INCREMENT:\r\n            return {\r\n                ...state,\r\n                currentIndex: state.currentIndex + 1\r\n            }\r\n        case SPRITE_DECREMENT:\r\n            return {\r\n                ...state,\r\n                currentIndex: state.currentIndex - 1\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nlet pokemonSpeciesReducer = (state = speciesInitialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_POKEMON_SPECIES_BEGIN:\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n            }\r\n        case FETCH_POKEMON_SPECIES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                ready: true,\r\n                species: action.payload\r\n            }\r\n        case FETCH_POKEMON_SPECIES_FAILURE:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                ready: false,\r\n                error: action.payload.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\nlet UIReducer = (state = UIInitialState, action) => {\r\n    switch (action.type) {\r\n        case MOVE_SCREEN_SHOW:\r\n            return {\r\n                ...state,\r\n                showMoveScreen: true,\r\n            }\r\n        case ABILITY_SCREEN_SHOW:\r\n            return {\r\n                ...state,\r\n                showAbilityScreen: true\r\n            }\r\n        case TYPE_SCREEN_SHOW:\r\n            return {\r\n                ...state,\r\n                showTypeScreen: true\r\n            }\r\n        case CLOSE_ALL_SCREENS:\r\n            return {\r\n                ...state,\r\n                showAbilityScreen: false,\r\n                showMoveScreen: false,\r\n                showTypeScreen: false,\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nlet abilityScreenInitialState = {\r\n    isFetching: false,\r\n    ready: false,\r\n    error: null,\r\n    ability: {}\r\n}\r\n\r\nlet abilityScreenReducer = (state = abilityScreenInitialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_ABILITY_BEGIN:\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n            }\r\n        case FETCH_ABILITY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                ready: true,\r\n                ability: action.payload\r\n            }\r\n        case FETCH_ABILITY_FAILURE:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                ready: false,\r\n                error: action.payload.error\r\n            }\r\n        case ABILITY_SCREEN_CLEAR:\r\n            return abilityScreenInitialState\r\n        default: return state;\r\n    }\r\n}\r\n\r\nlet typeScreenInitialState = {\r\n    isFetching: false,\r\n    ready: false,\r\n    error: null,\r\n    type: {}\r\n}\r\n\r\nlet typeScreenReducer = (state = typeScreenInitialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_TYPE_BEGIN:\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n            }\r\n        case FETCH_TYPE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                ready: true,\r\n                type: action.payload\r\n            }\r\n        case FETCH_TYPE_FAILURE:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                ready: false,\r\n                error: action.payload.error\r\n            }\r\n        case TYPE_SCREEN_CLEAR:\r\n            return typeScreenInitialState\r\n        default: return state\r\n    }\r\n}\r\n\r\nlet rootReducer = combineReducers({\r\n    pokemonListReducer,\r\n    pokemonReducer,\r\n    pokemonSpeciesReducer,\r\n    abilityScreenReducer,\r\n    typeScreenReducer,\r\n    UIReducer\r\n})\r\n\r\nexport default rootReducer\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport rootReducer from './reducers/Reducers'\n\nconst STORE = createStore(rootReducer,\n    compose(\n        applyMiddleware(thunk),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    ));\n\n\nReactDOM.render(\n    <Provider store={STORE}>\n        <App />\n    </Provider>\n    , document.getElementById(\"root\"))\n"],"sourceRoot":""}